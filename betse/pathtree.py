#!/usr/bin/env python3
# --------------------( LICENSE                            )--------------------
# Copyright 2014-2015 by Alexis Pietak & Cecil Curry
# See "LICENSE" for further details.

'''
High-level constants describing `betse`'s program structure.

Such constants provide the absolute paths of files and directories intended for
general use by both the CLI and GUI. For portability, such constants are
initialized in a system-aware manner guaranteed to be sane under various
installation environments -- including PyInstaller-frozen executables and
`setuptools`-installed script wrappers.
'''

# ....................{ IMPORTS                            }....................
from betse import metadata
from betse.util.path import dirs, files, paths
from betse.util.os import oses
from os import environ, path
import pkg_resources, sys

# ....................{ CONSTANTS ~ dir                    }....................
#FIXME: Replace all existing calls to os.path.expanduser() with such constant.

HOME_DIRNAME = None   # initialized below
'''
Absolute path of the current user's home directory.
'''

DOT_DIRNAME = None  # initialized below
'''
Absolute path of `betse`'s dot directory in the current user's home directory.

Such directory contains application-external resources (e.g., configuration
files) created at application runtime and subsequently editable by external
users and utilities.

Locations
----------
This path is operating system-specific as follows:

* Under Linux, this is `~/.betse/`. `betse` does *not* currently comply with the
  _XDG Base Directory Specification (e.g., `~/.local/share/betse`), which the
  principal authors of `betse` largely regard as unhelpful.
* Under OS X, this is `~/Library/Application Support/betse`.
* Under Windows, this is
  `C:\Documents and Settings\${User}\Application Data\betse`.

.. _XDG Base Directory Specification: http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html
'''

# ....................{ CONSTANTS ~ data                   }....................
DATA_DIRNAME = None   # initialized below
'''
Absolute path of `betse`'s data directory.

Such directory contains application-internal resources (e.g., media files)
frozen with the end-user executable binaries generated by PyInstaller.
'''

DATA_YAML_DIRNAME = None   # initialized below
'''
Absolute path of `betse`'s YAML data directory.

Such directory contains YAML configuration files and all ancillary files
referenced within the former.
'''

DATA_GEOMETRY_DIRNAME = None   # initialized below
'''
Absolute path of the application-wide geometry data directory.

This directory contains sample images intended to be used as input geometries in
tissue simulation configuration files. Each image defines a cell cluster shape
typically corresponding to some species (e.g., planaria) or organ (e.g., heart),
complete with internal cellular structure and exterior cellular boundary. Each
spatial subdivision of this shape is then associated with a real-world tissue
profile in the configuration file(s) referencing this image.
'''

DATA_CHANNELS_YAML_FILENAME = None   # initialized below
'''
Absolute path of the application-wide channel library file.

This file is the BETSE-specific offline equivalent of Channelpedia, an online
repository cataloguing constants for all known ion channels.
'''

# ....................{ CONSTANTS ~ file                   }....................
LOG_DEFAULT_FILENAME = None   # initialized below
'''
Absolute path of `betse`'s default user-specific logfile.

This is the plaintext file to which `betse` logs all messages by default.
'''

CONFIG_DEFAULT_FILENAME = None   # initialized below
'''
Absolute path of `betse`'s default application-wide configuration file.

This is the YAML file defining the default tissue simulation configuration.
'''

# ....................{ INITIALIZATION                     }....................
def init() -> None:
    '''
    Validate core directories and files required at program startup and
    initialize the corresponding module constants (e.g., `DOT_DIRNAME`).

    This function automatically creates non-existent paths where feasible and
    otherwise raises exceptions on such paths *not* being found or *not* having
    correct metadata (e.g., permissions).

    Such paths are required by both the CLI and GUI interfaces for `betse`. To
    support caller-specific exception handling, this function *must* be manually
    called early in program startup.
    '''
    _init_pathnames()
    _test_pathnames()

def _init_pathnames() -> None:
    '''
    Initialize all module constants (e.g., `DOT_DIRNAME`).
    '''
    # Declare such constants to be globals, permitting their modification below.
    global\
        HOME_DIRNAME, DOT_DIRNAME,\
        DATA_DIRNAME, DATA_GEOMETRY_DIRNAME, DATA_CHANNELS_YAML_FILENAME,\
        LOG_DEFAULT_FILENAME, CONFIG_DEFAULT_FILENAME

    # Absolute path of the current user's home directory.
    HOME_DIRNAME = path.expanduser('~')

    # Relative path of the top-level data directory.
    data_root_basename = 'data'

    # Initialize the absolute path of betse's data directory.
    #
    # If the current application is a PyInstaller-frozen executable binary,
    # defer to the the PyInstaller-specific private attribute "_MEIPASS" added
    # to the canonical "sys" module by the PyInstaller bootloader embedded in
    # such binary. This attribute provides the absolute path of the temporary
    # directory containing all application data resources extracted from such
    # binary by such bootloader. "And it's turtles all the way down."
    if hasattr(sys, '_MEIPASS'):
        DATA_DIRNAME = paths.join(sys._MEIPASS, data_root_basename)
    # If the current application is a setuptools-installed script wrapper, the
    # data directory will have been preserved as is in the setuptools-installed
    # copy of the current Python package tree. In such case, query setuptools to
    # obtain such directory's path in a cross-platform manner. See also:
    #     https://pythonhosted.org/setuptools/pkg_resources.html
    elif pkg_resources.resource_isdir(__name__, data_root_basename):
        DATA_DIRNAME =\
            pkg_resources.resource_filename( __name__, data_root_basename)
    # Else, the current application is either setuptools-symlinked script
    # wrapper *OR* was invoked via the hidden "python3 -m betse.cli.cli"
    # command. In either case, such directory's path is directly obtainable
    # relative to the absolute path of the current module.
    else:
        DATA_DIRNAME = paths.join(
            paths.get_dirname(__file__), data_root_basename)

    # Initialize the absolute paths of data subdirectories.
    DATA_YAML_DIRNAME = paths.join(DATA_DIRNAME, 'yaml')
    DATA_GEOMETRY_DIRNAME = paths.join(DATA_YAML_DIRNAME, 'geo')

    # Initialize the absolute paths of data files.
    DATA_CHANNELS_YAML_FILENAME = paths.join(DATA_YAML_DIRNAME, 'channels.yaml')
    CONFIG_DEFAULT_FILENAME = paths.join(DATA_YAML_DIRNAME, 'sim_config.yaml')

    # Initialize the absolute path of betse's dot directory.
    #
    # If the current system is OS X, set such directory accordingly.
    if oses.is_os_x():
        DOT_DIRNAME = paths.join(
            HOME_DIRNAME,
            'Library', 'Application Support',
            metadata.SCRIPT_NAME_CLI
        )
    # If the current system is Windows, set such directory accordingly.
    elif oses.is_windows():
        DOT_DIRNAME = paths.join(environ['APPDATA'], metadata.NAME)
    #FIXME: Explicitly assert POSIX compatibility here.
    # Else, assume the current system to be POSIX-compatible.
    else:
        DOT_DIRNAME = paths.join(HOME_DIRNAME, '.' + metadata.SCRIPT_NAME_CLI)

    # Absolute path of the default user-specific logfile.
    LOG_DEFAULT_FILENAME = paths.join(
        DOT_DIRNAME, metadata.NAME.lower() + '.log')

def _test_pathnames() -> None:
    '''
    Validate all module constants (e.g., `DOT_DIRNAME`).
    '''
    # Ensure that all requisite paths exist.
    dirs.die_unless_dir(DATA_DIRNAME, DATA_GEOMETRY_DIRNAME)
    files.die_unless_file(CONFIG_DEFAULT_FILENAME)

    # Make betse's top-level dot directory if not found.
    dirs.make_unless_dir(DOT_DIRNAME)

# --------------------( WASTELANDS                         )--------------------
    # Absolute path of the application-wide YAML file providing the default
    # tissue simulation configuration.
    #FUXME: Uncomment this after we ascertain the correct path for DATA_DIRNAME,
    #which we should probably get around to!

    #FUXME: This *OBVIOUSLY* isn't right. We appear to have two options,
    #depending on how "betse" was installed:
    #
    #* If via "setup.py install", we should probably use "pkg_resources" to
    #  obtain the data directory.
    #* Else, assume it was via "setup.py symlink", in which case the data
    #  directory can probably be located in one of two ways (in order of
    #  inreasing complexity):
    #  * Use the "__file__" attribute of the current module to obtain the
    #    absolute path of such module. Given that, we can then obtain the
    #    absolute path of the data directory via path munging and the
    #    os.path.abspath(pathname) function, converting relative to absolute
    #    paths. (Double-check that, of course.)
    #  * Manually follow the symlink at
    #    "/usr/lib64/python3.3/site-packages/betse". Yeah. That seems horrid.
    #    Happily, the former approach should work.
#FUXME: The top-level "setup.py" script should be instructed to install the
#top-level "data" directory. Yeah!
#FUXME: Actually use this. More work than we currently care to invest.

# PROGRAM_CONFIG_DEFAULT_FILENAME = None   # initialized below
# '''
# Absolute path of the default user-specific file with which `betse` configures
# application-wide behaviour (e.g., log settings).
# '''
#     # Absolute path of the default user-specific file with which `betse`
#     # configures application-wide behaviour (e.g., log settings).
#     CORE_CONFIG_DEFAULT_FILENAME = paths.join(DOT_DIRNAME, 'core_config.yaml')

    # Defer such imports to avoid circular dependencies.
